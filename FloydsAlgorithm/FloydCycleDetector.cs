using System;
using System.Collections.Generic;

namespace FloydsAlgorithm
{
    /// <summary>
    /// Provides methods for detecting cycles in function value iterations using Floyd's cycle-finding algorithm.
    /// </summary>
    public static class FloydCycleDetector
    {
        /// <summary>
        /// Finds a cycle in the sequence generated by repeatedly applying the function f starting from the given value.
        /// </summary>
        /// <typeparam name = "T">The type of the elements in the sequence.</typeparam>
        /// <param name = "start">The starting value of the sequence.</param>
        /// <param name = "f">The function to generate the next element in the sequence.</param>
        /// <returns>
        /// A <see cref = "CycleDetectionResult{T}"/> containing the starting element of the cycle,
        /// the length of the cycle, and the length of the non-cyclic part preceding the cycle.
        /// </returns>
        public static CycleDetectionResult<T> FindCycle<T>(T start, Func<T, T> f)
        {
            T tortoise = f(start);
            T hare = f(f(start));
            while (!EqualityComparer<T>.Default.Equals(tortoise, hare))
            {
                tortoise = f(tortoise);
                hare = f(f(hare));
            }

            T cycleStart = start;
            int mu = 0;
            while (!EqualityComparer<T>.Default.Equals(cycleStart, tortoise))
            {
                cycleStart = f(cycleStart);
                tortoise = f(tortoise);
                mu++;
            }

            int lambda = 1;
            T temp = f(tortoise);
            while (!EqualityComparer<T>.Default.Equals(tortoise, temp))
            {
                temp = f(temp);
                lambda++;
            }

            CycleDetectionResult<T> result = new CycleDetectionResult<T>
            {
                CycleStart = cycleStart,
                CycleLength = lambda,
                NonCycleLength = mu
            };
            return result;
        }
    }
}